{"version":3,"file":"utils-00aa6acb.js","sources":["../src/order-signing/utils.ts"],"sourcesContent":["import type {\n  Order as OrderFromContract,\n  Signature,\n  TypedDataDomain,\n  EcdsaSigningScheme as EcdsaSigningSchemeContract,\n} from '@wowswapfork/contracts'\nimport {\n  domain as domainGp,\n  EcdsaSignature,\n  IntChainIdTypedDataV4Signer,\n  SigningScheme,\n  signOrder as signOrderGp,\n  signOrderCancellation as signOrderCancellationGp,\n  signOrderCancellations as signOrderCancellationsGp,\n  TypedDataVersionedSigner,\n} from '@wowswapfork/contracts'\nimport type { Signer } from '@ethersproject/abstract-signer'\nimport type { SigningResult, SignOrderParams, SignOrderCancellationParams, UnsignedOrder } from './types'\n\nimport { COW_PROTOCOL_SETTLEMENT_CONTRACT_ADDRESS } from '../common/consts'\nimport { CowError, SupportedChainId } from '../common'\nimport { EcdsaSigningScheme } from '../order-book'\nimport { SignOrderCancellationsParams } from './types'\n\n// For error codes, see:\n// - https://eth.wiki/json-rpc/json-rpc-error-codes-improvement-proposal\n// - https://www.jsonrpc.org/specification#error_object\nconst METAMASK_SIGNATURE_ERROR_CODE = -32603\nconst METHOD_NOT_FOUND_ERROR_CODE = -32601\n// Added the following because of 1Inch wallet who doesn't send the error code\n// So we will check the actual error text\nconst METHOD_NOT_FOUND_ERROR_MSG_REGEX = /Method not found/i\nconst V4_ERROR_MSG_REGEX = /eth_signTypedData_v4 does not exist/i\nconst V3_ERROR_MSG_REGEX = /eth_signTypedData_v3 does not exist/i\nconst RPC_REQUEST_FAILED_REGEX = /RPC request failed/i\nconst METAMASK_STRING_CHAINID_REGEX = /provided chainid .* must match the active chainid/i\n\nconst mapSigningSchema: Record<EcdsaSigningScheme, EcdsaSigningSchemeContract> = {\n  [EcdsaSigningScheme.EIP712]: SigningScheme.EIP712,\n  [EcdsaSigningScheme.ETHSIGN]: SigningScheme.ETHSIGN,\n}\n\ninterface ProviderRpcError extends Error {\n  message: string\n  code: number\n  data?: unknown\n}\n\ntype PayloadParams =\n  | Pick<SignOrderParams, 'order' & 'chainId'>\n  | Pick<SignOrderCancellationParams, 'chainId' & 'orderId'>\n  | Pick<SignOrderCancellationsParams, 'chainId' & 'orderUids'>\n\nfunction isProviderRpcError(error: unknown): error is ProviderRpcError {\n  return (error as ProviderRpcError).code !== undefined || (error as ProviderRpcError).message !== undefined\n}\n\nasync function _signOrder(params: SignOrderParams): Promise<Signature> {\n  const { chainId, signer, order, signingScheme } = params\n\n  const domain = getDomain(chainId)\n\n  return signOrderGp(domain, order as OrderFromContract, signer, mapSigningSchema[signingScheme])\n}\n\nasync function _signOrderCancellation(params: SignOrderCancellationParams): Promise<Signature> {\n  const { chainId, signer, signingScheme, orderUid } = params\n\n  const domain = getDomain(chainId)\n\n  return signOrderCancellationGp(domain, orderUid, signer, mapSigningSchema[signingScheme])\n}\n\nasync function _signOrderCancellations(params: SignOrderCancellationsParams): Promise<Signature> {\n  const { chainId, signer, signingScheme, orderUids } = params\n\n  const domain = getDomain(chainId)\n\n  return signOrderCancellationsGp(domain, orderUids, signer, mapSigningSchema[signingScheme])\n}\n\nasync function _signPayload(\n  payload: PayloadParams,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  signFn: (params: any) => Promise<Signature>,\n  signer: Signer,\n  signingMethod: 'default' | 'v4' | 'int_v4' | 'v3' | 'eth_sign' = 'v4'\n): Promise<SigningResult> {\n  const signingScheme: EcdsaSigningScheme =\n    signingMethod === 'eth_sign' ? EcdsaSigningScheme.ETHSIGN : EcdsaSigningScheme.EIP712\n  let signature: Signature | null = null\n\n  let _signer\n  try {\n    switch (signingMethod) {\n      case 'default':\n      case 'v3':\n        _signer = new TypedDataVersionedSigner(signer)\n        break\n      case 'int_v4':\n        _signer = new IntChainIdTypedDataV4Signer(signer)\n        break\n      default:\n        _signer = signer\n    }\n  } catch (e) {\n    console.error('Wallet not supported:', e)\n    throw new CowError('Wallet not supported')\n  }\n\n  try {\n    signature = (await signFn({ ...payload, signer: _signer, signingScheme })) as EcdsaSignature // Only ECDSA signing supported for now\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (e: any) {\n    if (!isProviderRpcError(e)) {\n      // Some other error signing. Let it bubble up.\n      console.error(e)\n      throw e\n    }\n\n    const regexErrorCheck = [METHOD_NOT_FOUND_ERROR_MSG_REGEX, RPC_REQUEST_FAILED_REGEX].some((regex) =>\n      // for example 1Inch error doesn't have e.message so we will check the output of toString()\n      [e.message, e.toString()].some((msg) => regex.test(msg))\n    )\n\n    if (e.code === METHOD_NOT_FOUND_ERROR_CODE || regexErrorCheck) {\n      // Maybe the wallet returns the proper error code? We can only hope ðŸ¤ž\n      // OR it failed with a generic message, there's no error code set, and we also hope it'll work\n      // with other methods...\n      switch (signingMethod) {\n        case 'v4':\n          return _signPayload(payload, signFn, signer, 'default')\n        case 'default':\n          return _signPayload(payload, signFn, signer, 'v3')\n        case 'v3':\n          return _signPayload(payload, signFn, signer, 'eth_sign')\n        default:\n          throw e\n      }\n    } else if (METAMASK_STRING_CHAINID_REGEX.test(e.message)) {\n      // Metamask now enforces chainId to be an integer\n      return _signPayload(payload, signFn, signer, 'int_v4')\n    } else if (e.code === METAMASK_SIGNATURE_ERROR_CODE) {\n      // We tried to sign order the nice way.\n      // That works fine for regular MM addresses. Does not work for Hardware wallets, though.\n      // See https://github.com/MetaMask/metamask-extension/issues/10240#issuecomment-810552020\n      // So, when that specific error occurs, we know this is a problem with MM + HW.\n      // Then, we fallback to ETHSIGN.\n      return _signPayload(payload, signFn, signer, 'eth_sign')\n    } else if (V4_ERROR_MSG_REGEX.test(e.message)) {\n      // Failed with `v4`, and the wallet does not set the proper error code\n      return _signPayload(payload, signFn, signer, 'v3')\n    } else if (V3_ERROR_MSG_REGEX.test(e.message)) {\n      // Failed with `v3`, and the wallet does not set the proper error code\n      return _signPayload(payload, signFn, signer, 'eth_sign')\n    } else {\n      // Some other error signing. Let it bubble up.\n      console.error(e)\n      throw e\n    }\n  }\n\n  const data: unknown = signature?.data\n\n  return { signature: data?.toString() || '', signingScheme }\n}\n\n/**\n * Returns the signature for the specified order with the signing scheme encoded\n * into the signature.\n * @param {UnsignedOrder} order The order to sign.\n * @param {SupportedChainId} chainId The chain Id\n * @param {Signer} signer The owner for the order used to sign.\n * @return {*} Encoded signature including signing scheme for the order.\n */\nexport async function signOrder(\n  order: UnsignedOrder,\n  chainId: SupportedChainId,\n  signer: Signer\n): Promise<SigningResult> {\n  return _signPayload({ order, chainId }, _signOrder, signer)\n}\n\n/**\n * Returns the signature for the Order Cancellation with the signing scheme encoded\n * into the signature.\n * @param {string} orderUid The unique identifier of the order being cancelled.\n * @param {SupportedChainId} chainId The chain Id\n * @param {Signer} signer The owner for the order used to sign.\n * @return {*} Encoded signature including signing scheme for the order.\n */\nexport async function signOrderCancellation(\n  orderUid: string,\n  chainId: SupportedChainId,\n  signer: Signer\n): Promise<SigningResult> {\n  return _signPayload({ orderUid, chainId }, _signOrderCancellation, signer)\n}\n\n/**\n * Returns the signature for the Order Cancellations with the signing scheme encoded\n * into the signature.\n *\n * @param {string[]} orderUids The unique identifiers of the orders being cancelled.\n * @param {SupportedChainId} chainId The CoW Protocol protocol `chainId` context that's being used.\n * @param {Signer} signer The owner that had placed the orders used to sign.\n * @returns {*} Encoded signature including signing scheme for the order.\n */\nexport async function signOrderCancellations(\n  orderUids: string[],\n  chainId: SupportedChainId,\n  signer: Signer\n): Promise<SigningResult> {\n  return _signPayload({ orderUids, chainId }, _signOrderCancellations, signer)\n}\n\n/**\n * Returns the TypedDataDomain used for signing for the specified chainId.\n * @param {SupportedChainId} chainId The chain Id\n * @return {*} The TypedDataDomain for the specified chainId.\n * @throws {CowError} If the chainId is not supported.\n */\nexport function getDomain(chainId: SupportedChainId): TypedDataDomain {\n  // Get settlement contract address\n  const settlementContract = COW_PROTOCOL_SETTLEMENT_CONTRACT_ADDRESS[chainId]\n\n  if (!settlementContract) {\n    throw new CowError('Unsupported network. Settlement contract is not deployed')\n  }\n\n  return domainGp(chainId, settlementContract)\n}\n"],"names":["METAMASK_SIGNATURE_ERROR_CODE","METHOD_NOT_FOUND_ERROR_CODE","METHOD_NOT_FOUND_ERROR_MSG_REGEX","V4_ERROR_MSG_REGEX","V3_ERROR_MSG_REGEX","RPC_REQUEST_FAILED_REGEX","METAMASK_STRING_CHAINID_REGEX","mapSigningSchema","EcdsaSigningScheme","EIP712","SigningScheme","ETHSIGN","async","_signOrder","params","chainId","signer","order","signingScheme","domain","getDomain","signOrderGp","_signOrderCancellation","orderUid","signOrderCancellationGp","_signOrderCancellations","orderUids","signOrderCancellationsGp","_signPayload","payload","signFn","signingMethod","_signature","_signer","signature","TypedDataVersionedSigner","IntChainIdTypedDataV4Signer","e","console","error","CowError","_extends","undefined","code","message","regexErrorCheck","some","regex","toString","msg","test","data","signOrder","signOrderCancellation","signOrderCancellations","settlementContract","COW_PROTOCOL_SETTLEMENT_CONTRACT_ADDRESS","domainGp"],"mappings":"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"}